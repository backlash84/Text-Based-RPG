#### IMPORTS ####
import os
import sys
import time
import random

#### FUNCTIONS ####
def invalid():
    print("Invalid command, please try again.")

def inventory():
    print("Coin: " + str(player.coin))
    if (player_items.count(mushroom)) >= 1:
        print("Mushroom: " + str(player_items.count(mushroom)))
    if (player_items.count(log)) >= 1:
        print("Log: " + str(player_items.count(log)))
    if (player_items.count(stone)) >= 1:
        print("Stone: " + str(player_items.count(stone)))
    if (player_items.count(machete)) >= 1:
        print("Machete: " + str(player_items.count(machete)))
    if (player_items.count(axe)) >= 1:
        print("Axe: " + str(player_items.count(axe)))


def character_sheet():
    print("Player health: " + str(player.health))
    print("Player energy: " + str(player.energy))
    print("")
    if player_skills.count(scavenging) > 0:
        print(scavenging.name + ": " + str(player_skills.count(scavenging)))
        print("")
        print(scavenging.description)

    print("")
    print("To close character sheet, type exit.")
    x = 0
    while x == 0:
        option = input("> ")
        if option.lower() == ("exit"):
            exec(last_location)
        else:
            invalid()


def cut_tree():
    if player_items.count(axe) >= 1:
        time.sleep(5)
        player_items.append(log)
        player.energy = player.energy - 10
        print("You cut down a tree using your axe, and you receive one wood log!")

    elif player_items.count(machete) >= 1:
        time.sleep(10)
        player_items.append(log)
        player.energy = player.energy - 20
        print("You cut down a tree using your machete, and you receive one wood log!")

    else:
        print("You have nothing with which to chop the wood.")


def search():
    global mushroom
    probability = ['find', 'nothing']
    result = random.choices(probability, weights=[player_skills.count(scavenging), 4], k=1)[0]
    if result == 'find':
        time.sleep(5)
        mushroom = mushroom + 1
        print("You found a mushroom!")

    elif result == 'nothing':
        time.sleep(5)
        print("You found nothing of value")

    else:
        print("Error, command incorrect. BAD PROGRAMMER!")


def general_store_buy():
    x = 0
    while x == 0:
        print('''To buy an item, simply type it's name. To leave, type exit.

        Items for sale:
        -Axe: ''' + str(axe.value) + '''coin
        -Machete: ''' + str(machete.value) + ''' coins.
        -Log: ''' + str(log.value) + ''' coins
        -Mushroom: ''' + str(mushroom.value) + ''' coins
        -Stone: ''' + str(stone.value) + ''' coin.''')
        option = input("> ")

        if option.lower() == ("inventory"):
            inventory()

        elif option.lower() == ("axe"):
            axe.buy()

        elif option.lower() == ("log"):
            log.buy()

        elif option.lower() == ("machete"):
            machete.buy()

        elif option.lower() == ("mushroom"):
            mushroom.buy()

        elif option.lower() == ("stone"):
            stone.buy()

        elif option.lower() == ("exit"):
            break

        else:
            print("Invalid command, please try again.")


def general_store_sell():
    x = 0
    while x == 0:
        print("To sell an item, simply type it's name, it will sell for half its value. To exit, type exit.")

        option = input("> ")

        if option.lower() == ("inventory"):
            inventory()

        elif option.lower() == ("axe"):
            axe.sell()

        elif option.lower() == ("log"):
            log.sell()

        elif option.lower() == ("machete"):
            machete.sell()

        elif option.lower() == ("mushroom"):
            mushroom.sell()

        elif option.lower() == ("stone"):
            stone.sell()

        elif option.lower() == ("exit"):
            break

        else:
            print("Invalid command, please try again.")



#### CLASSES ####

class player:
    def __init__(self, name,skills, coin, items, energy, health, armour):
        self.name = name
        self.skills = skills
        self.coin = (coin)
        self.items = items
        self.energy = energy
        self.health = health
        self.armour = armour

class item:
    def __init__(self, name, value, description):
        self.name = name
        self.value = (value)
        self.sell = (value/2)
        self.description = description

    def buy(self):
        if player.coin >= self.value:
            player_items.append(self)
            player.coin = player.coin - self.value
            print("You purchased a " + str(self.name) + ".")
        else:
            print("You do not have enough coin to purchase this item.")


    def sell(self):
        if player_items.count(self) >= 1:
            player_items.remove(self)
            (player.coin) = (player.coin) + (self.sell)
            print("You sold a " + str(self.name) + "for" + str(self.sell))
        else:
            print("You do not have this item.")


class skills:
    def __init__(self, name, description):
        self.name = name
        self.description = description

class location:
    def __init__(self, name, description, options):
        self.name = name
        self.description = description
        self.options = options

    def location(self):
        print(self.name)
        print(self.description)
        print("Options:" + self.options)


#### SKILLS ####

scavenging = skills("Scavenging", "The ability to find things of use/value in nature.")

player_skills = [scavenging]


#### ITEMS ####

mushroom = item("Mushroom", 3, "A forest mushroom, in good condition, commonly used in food and medicine.")
machete = item("Machete", 5, "A long bladed machete, multi-purpose. Chops down a tree in roughly ten seconds.")
log = item("Log", 1, "A simple wooden log.")
axe = item("Axe", 10, "A long handled axe, cuts down trees in roughly 5 seconds.")
stone = item("Stone", 1, "A simple slab of stone.")

player_items = [machete]

#### VARIABLES ####
player = player("Adventurer", player_skills, 0, player_items, 100, 100, 0)


#### LOCATIONS ####

def start_menu():
    os.system("cls")
    print('''Welcome to my game!
    1: start
    2: help
    3: quit   ''')

    global last_location
    x = 0
    while x == 0:
        option = input("> ")
        if option.lower() == ("start"):
            last_location = 'forest_location()'
            break
        elif option.lower == ("help"):
            print("Help section goes here.")
            last_location = 'start_menu()'
            break
        elif option.lower == ("quit"):
            sys.exit()
        else:
            invalid()


forest = location("Forest", "The forest is densely packed with trees and rich with foliage.", "\n -Chop wood \n -Go to town \n -Go to clearing \n -Go to rocky hillside \n -Search \n -Inventory")
def forest_location():
    global last_location
    print(forest.location())
    x = 0
    while x == 0:
        option = input("> ")
        if option.lower() == ("chop wood"):
            cut_tree()

        elif option.lower() == ("go to town"):
            last_location = 'town_location()'
            break

        elif option.lower() == ("go to clearing"):
            print("Place clearing function here.")

        elif option.lower() == ("go to rocky hillside"):
            print("Place rockey hillside function here.")

        elif option.lower() == ("search"):
            search()

        elif option.lower() == ("inventory"):
            inventory()

        elif option.lower() == ("character sheet"):
            character_sheet()

        else:
            print("Command not valid, please try again.")


town = location("Town", "A quaint little town with simple wood buildings.", "\n -Go to general store\n -Go to forest\n -Inventory")
def town_location():
    global last_location
    print(town.location())
    x = 0
    while x == 0:
        option = input("> ")
        if option.lower() == ("go to general store"):
            last_location = 'town_general_store()'
            break

        elif option.lower() == ("go to forest"):
            last_location = 'forest_location()'
            break

        elif option.lower() == ("inventory"):
            inventory()

        else:
            print("Command not valid, please try again.")


general_store = location("General store", "A cluttered little shop filled with many different odds and ends.", "\n -Buy\n -Sell\n -Inventory\n -Exit")
def town_general_store():
    global last_location
    print(general_store.location())
    x = 0
    while x == 0:
        option = input("> ")
        if option.lower() == ("inventory"):
            inventory()
        elif option.lower() == ("buy"):
            general_store_buy()
        elif option.lower() == ("sell"):
            general_store_sell()

        elif option.lower() == ("give coin"):
            player.coin = player.coin + 100

        elif option.lower() == ("exit"):
            last_location = 'town_location()'
            break
        else:
            print("Not a valid command, please try again.")



#### GAME START ####
last_location = 'start_menu()'
player.health = 100

while player.health > 0:
    if player.energy <= 0:
        print("You collapse due to lack of energy, you lose 10 health.")
        player.health = player.health - 10
        player.energy = 50
        exec(last_location)

    else:
        exec(last_location)

#### PLAYER DEAD ####
if player.health <= 0:
    print("        GAME OVER        ")
    print("Your health reached zero.")
    time.sleep(5)
    start_menu()
