#### IMPORTS ####
import os
import sys
import time
import random

#### CLASS ####
class player:
    def __init__(self, name,skills, coin, items, energy, health, armour):
        self.name = name
        self.skills = skills
        self.coin = coin
        self.items = items
        self.energy = energy
        self.health = health
        self.armour = armour

class item:
    def __init__(self, name, value, description):
        self.name = name
        self.value = (value)
        self.sell = (value/2)
        self.description = description

class skills:
    def __init__(self, name, description):
        self.name = name
        self.description = description

class location:
    def __init__(self, name, description, options):
        self.name = name
        self.description = description
        self.options = options

    def location(self):
        print(self.name)
        print(self.description)
        print("Options:" + self.options)


#### ITEMS ####

mushroom = item("Mushroom", 3, "A forest mushroom, in good condition, commonly used in food and medicine.")
machete = item("Machete", 5, "A long bladed machete, multi-purpose. Costs 20 energy to cut down a tree.")
log = item("Log", 1, "A simple wooden log.")
axe = item("Axe", 10, "A long handled axe, purpose built for cutting trees, costing only 10 energy.")
stone = item("Stone", 1, "A simple slab of stone.")
pickaxe = item("Pick axe", 15, "A simple mining tool used to gather stone and ore from the earth.")
copper_ore = item("Copper ore", 2, "A mixture of raw copper and grit.")

player_items = [machete, pickaxe]

item_list = [mushroom, machete, log, axe, stone, pickaxe, copper_ore]

def item_values():
    for item_var in item_list:
        print(item_var.name + ": " + str(item_var.value))

def inventory_items():
    for item_var in item_list:
        if player_items.count(item_var) > 0:
            print(item_var.name + ": " + str(player_items.count(item_var)))

def player_inventory():
    print("Health: " + str(main_character.health))
    print("Energy: " + str(main_character.energy))
    print("Coin: " + str(main_character.coin))
    print("")
    print("ITEMS")
    print("")
    inventory_items()



#### SKILLS ####

scavenging = skills("Scavenging", "The ability to find things of use/value in nature.")
strength = skills("Strength", "An individuals raw physical power.")

player_skills = [scavenging, strength]


#### FUNCTIONS ####

def invalid():
    print("Invalid command, please try again.")

def cut_tree():
    if player_items.count(axe) >= 1:
        time.sleep(11 - player_skills.count(strength))
        player_items.append(log)
        player.energy = player.energy - 10
        print("You cut down a tree using your axe, and you receive one wood log!")

    elif player_items.count(machete) >= 1:
        time.sleep(11 - player_skills.count(strength))
        player_items.append(log)
        player.energy = player.energy - 20
        print("You cut down a tree using your machete, and you receive one wood log!")


    else:
        print("You have nothing with which to chop the wood.")

def mine_ore(ore, pickaxe):
    if player_items.count(pickaxe) >= 1:
        time.sleep(10)
        player_items.append(ore)
        player.energy = player.energy - 10
        if ore == stone:
            print("You manage to break a slap of stone free from the surrounding rock.")
        else:
            print("After some effort, you manage to harvest a decent amount of " + ore.name + ".")

def search(item_var):
    probability = ['find', 'nothing']
    result = random.choices(probability, weights=[player_skills.count(scavenging), 4], k=1)[0]
    if result == 'find':
        time.sleep(5)
        item_var = item_var + 1
        print("You found a " + item_var.discription + "!")

    elif result == 'nothing':
        time.sleep(5)
        print("You found nothing of value")

    else:
        print("Error, command incorrect. BAD PROGRAMMER!")

def buy_item(item_name):
    if item_list.count(item_name) > 0 and main_character.coin >= item_name.value:
        player_items.append(item_name)
        main_character.coin = main_character.coin - item_name.value

def sell_item(item_name):
    if player_items.count(item_name) > 0:
        player_items.remove(item_name)
        main_character.coin = main_character.coin + item_name.sell


def general_store_buy():
    x = 0
    while x == 0:
        print("Item values are displayed after their name.")
        print("To purchase an item, simply type in its name.")
        print("")
        item_values()
        option = input("> ")
        input_lower = option.lower()

        if option.lower() == ("inventory"):
            player_inventory()

        elif eval(input_lower) in item_list:
            buy_item(eval(input_lower))

        elif option.lower() == ("exit"):
            break

        else:
            print("Invalid command, please try again.")


def general_store_sell():
    x = 0
    while x == 0:
        print("To sell an item, simply type its name.")
        print("Sold items go for half their default value.")
        print("")
        option = input("> ")
        input_lower = option.lower()

        if option.lower() == ("inventory"):
            player_inventory()

        elif eval(input_lower) in player_items:
            sell_item(eval(input_lower))

        elif option.lower() == ("exit"):
            break

        else:
            print("Invalid command, please try again.")


#### LOCATIONS ####

def start_menu():
    os.system("cls")
    print('''Welcome to my game!
    1: start
    2: help
    3: quit   ''')

    global last_location
    x = 0
    while x == 0:
        option = input("> ")
        if option.lower() == ("start"):
            last_location = 'forest_location()'
            break
        elif option.lower == ("help"):
            print("Help section goes here.")
            last_location = 'start_menu()'
            break
        elif option.lower == ("quit"):
            sys.exit()
        else:
            invalid()


forest = location("Forest", "The forest is densely packed with trees and rich with foliage.", "\n -Chop wood \n -Go to town \n -Go to clearing \n -Go to rocky hillside \n -Search \n -Inventory")
def forest_location():
    global last_location
    print(forest.location())
    x = 0
    while x == 0:
        option = input("> ")
        if option.lower() == ("chop wood"):
            cut_tree()

        elif option.lower() == ("go to town"):
            last_location = 'town_location()'
            break

        elif option.lower() == ("go to clearing"):
            print("Place clearing function here.")

        elif option.lower() == ("go to rocky hillside"):
            last_location = 'rockey_hillside_location()'
            break

        elif option.lower() == ("search"):
            search()

        elif option.lower() == ("inventory"):
            player_inventory()

        elif option.lower() == ("character sheet"):
            character_sheet()

        else:
            print("Command not valid, please try again.")


town = location("Town", "A quaint little town with simple wood buildings.", "\n -Go to general store\n -Go to forest\n -Inventory")
def town_location():
    global last_location
    print(town.location())
    x = 0
    while x == 0:
        option = input("> ")
        if option.lower() == ("go to general store"):
            last_location = 'town_general_store_location()'
            break

        elif option.lower() == ("go to forest"):
            last_location = 'forest_location()'
            break

        elif option.lower() == ("inventory"):
            player_inventory()

        else:
            print("Command not valid, please try again.")


general_store = location("General store", "A cluttered little shop filled with many different odds and ends.", "\n -Buy\n -Sell\n -Inventory\n -Exit")
def town_general_store_location():
    global last_location
    print(general_store.location())
    x = 0
    while x == 0:
        option = input("> ")

        if option.lower() == ("inventory"):
            player_inventory()

        elif option.lower() == ("buy"):
            general_store_buy()

        elif option.lower() == ("sell"):
            general_store_sell()

        elif option.lower() == ("give coin"):
            player.coin = player.coin + 100

        elif option.lower() == ("exit"):
            last_location = 'town_location()'
            break
        else:
            print("Not a valid command, please try again.")

rocky_hillside = location("Rocky Hillside", "A rocky outcropping surrounded by gravel and slabs of stone.", "\n -Mine for stone\n -Mine for copper ore\n -Go to forest\n -Inventory")
def rockey_hillside_location():
    global last_location
    print(rocky_hillside.location())
    x = 0
    while x == 0:
        option = input("> ")

        if option.lower() == ("mine for stone"):
            mine_ore(stone, pickaxe)

        elif option.lower() == ("mine for copper"):
            mine_ore(copper_ore, pickaxe)

        elif option.lower() == ("inventory"):
            player_inventory()

        elif option.lower() == ("go to forest"):
            last_location = 'forest_location()'
            break

        else:
            invalid()

#### CHARACTERS ####
main_character = player("Adventurer", player_skills, 100, player_items, 100, 100, 0)

#### GAME START ####
last_location = 'start_menu()'


while main_character.health > 0:
    if main_character.energy <= 0:
        print("You collapse due to lack of energy, you lose 10 health.")
        main_character = main_character.health - 10
        main_character.energy = 50
        exec(last_location)

    else:
        exec(last_location)

#### PLAYER DEAD ####
if main_character.health <= 0:
    print("        GAME OVER        ")
    print("Your health reached zero.")
    time.sleep(5)
    start_menu()
